(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{929:function(t,e,s){"use strict";s.r(e);var r=s(70),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"一个-tcp-连接上面能发多少个-http-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一个-tcp-连接上面能发多少个-http-请求"}},[t._v("#")]),t._v(" 一个 TCP 连接上面能发多少个 HTTP 请求")]),t._v(" "),s("h2",{attrs:{id:"_1-http-1-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-http-1-0"}},[t._v("#")]),t._v(" 1. HTTP 1.0")]),t._v(" "),s("p",[t._v("HTTP 1.0 的时候，每发送一个 HTTP 请求就需要建立一次 TCP 连接，之后在断开，这样一来开销较大。虽然不属于 HTTP 1.0 的规范，但是部分服务器会添加对 "),s("code",[t._v("Connection: keep-alive")]),t._v(" 的支持，在完成 HTTP 请求后不要立即断开 TCP 连接，而是复用。")]),t._v(" "),s("h2",{attrs:{id:"_2-http-1-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-http-1-1"}},[t._v("#")]),t._v(" 2. HTTP 1.1")]),t._v(" "),s("p",[t._v("HTTP 1.1 正式添加了对 "),s("code",[t._v("Connection: keep-alive")]),t._v(" 的支持，但这代以及前一代 HTTP 都存在这样一个问题："),s("strong",[t._v("单个 TCP 连接在同一时刻只能处理一个请求")]),t._v("，两个请求之间的生命周期不可以重叠。")]),t._v(" "),s("p",[t._v("因此 HTTP 1.1 添加了 "),s("a",{attrs:{href:"https://tools.ietf.org/html/rfc2616#section-8.1.2.2",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pipelining "),s("OutboundLink")],1),t._v(" 的规范来解决这个问题，内容如下：")]),t._v(" "),s("blockquote",[s("p",[t._v('A client that supports persistent connections MAY "pipeline" its requests (i.e., send multiple requests without waiting for each response). A server MUST send its responses to those requests in the same order that the requests were received.\n一个支持持久连接的客户端可以在一个连接中发送多个请求（不需要等待任意请求的响应）。收到请求的服务器必须按照请求收到的顺序发送响应。')])]),t._v(" "),s("p",[t._v("至于服务端必须按照收到请求顺序返回的原因，是因为 HTTP 1.1 是个文本协议，返回的内容并无法区分是哪个请求的。")]),t._v(" "),s("p",[t._v("但是 Pipelining 在一些代理服务器无法正确处理，且实现复杂，存在 "),s("code",[t._v("Head-of-line Blocking")]),t._v(" 连接头阻塞（即首个请求耗时较长阻塞了后续请求）等问题，因此现代浏览器一般不开启这个特性，而是通过同时建立多个 TCP 连接来提高效率，且不同浏览器能同时建立的连接数也不一样（Chrome 默认是 6）。")]),t._v(" "),s("h1",{attrs:{id:"_3-http-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-2"}},[t._v("#")]),t._v(" 3. HTTP 2")]),t._v(" "),s("p",[t._v("HTTP 2 新增了 Multiplexing 多路传输特性，允许在一个 TCP 同时发送多个 HTTP 请求。通常 HTTP 2 都在 HTTPS 的基础上实现的。如果使用不了 HTTPS ，通常也是用不了 HTTP 2，那么浏览器会转而使用 HTTP 1.1。")])])}),[],!1,null,null,null);e.default=n.exports}}]);