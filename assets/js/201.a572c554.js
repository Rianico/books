(window.webpackJsonp=window.webpackJsonp||[]).push([[201],{924:function(s,t,a){"use strict";a.r(t);var e=a(70),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("从事大数据几年后，SQL 反而写的较少，且 MySQL 也接触的少了，此处备忘一些常用语法函数以及技巧。")]),s._v(" "),a("p",[s._v("在 MySQL 中，通常按照以下优先级编写 SQL：")]),s._v(" "),a("ol",[a("li",[s._v("能用聚合、排序等函数解决就尽量以该方式解决问题")]),s._v(" "),a("li",[s._v("考虑使用开窗函数")]),s._v(" "),a("li",[s._v("考虑使用等值连接")]),s._v(" "),a("li",[s._v("迫不得以采用子查询，并且需要注意子查询尽量走索引")])]),s._v(" "),a("h2",{attrs:{id:"正篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正篇"}},[s._v("#")]),s._v(" 正篇")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("求 top N，最快的方式是使用"),a("strong",[s._v("子查询 + 窗口函数")]),s._v("，其次是利用左连接做不等值连接，再做聚合 + having 条件。")])]),s._v(" "),a("li",[a("p",[s._v("通过子查询先走索引，再扫描所需数据，减少不必要的 I/O 扫描，通常用于 "),a("code",[s._v("LIMIT 10000, 10")]),s._v(" 这类需要扫描很多行，最后却只需要其中部分结果的场景：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test a \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("inner")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("join")]),s._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" val"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("limit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("300000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" b \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("on")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("blockquote",[a("p",[s._v("NOTE：扫描过多无用的数据会加载到 buffer pool 中，污染 buffer pool。")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("LIMIT 2,1")]),s._v(" 意思是先偏移 2 行，再取 1 行数据，等价于 "),a("code",[s._v("LIMIT 1 OFFSET 2")])])]),s._v(" "),a("li",[a("p",[s._v("四大常用的排名函数：")]),s._v(" "),a("ul",[a("li",[s._v("row_number()：依次递增排名，无重复排名")]),s._v(" "),a("li",[s._v("rank()：相同分数有重复排名，重复后下一个不重复的按照实际排名，有间隔")]),s._v(" "),a("li",[s._v("dense_rank()：分数一致排名一致，分数不一致排名 + 1")]),s._v(" "),a("li",[s._v("NTILE(4)：分组排名，里面的数字是几，最多排名就是几，里面的数字是4，最多的排名就是4")])])]),s._v(" "),a("li",[a("p",[s._v("对于求连续出现 n 次及以上的值，可以为每一行打个 row_number() 标记，再按照值分区打一个 row_number() 标记，如果一个数连续出现，那么"),a("strong",[s._v("每一行两个标记相减的差值应该是一样的")]),s._v("，在根据差值以及所求值做聚合，以 Having 做过滤即可。")])]),s._v(" "),a("li",[a("p",[s._v("对于调整表中 id 对应数据的类型，可以考虑下通过数学计算，将目标调整位置的 id 与原有位置的 id 连接起来做 JOIN。如果是相邻位置，还可以使用 开窗函数 row_number 排序的方式解决。")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);