(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{831:function(t,i,a){"use strict";a.r(i);var e=a(70),s=Object(e.a)({},(function(){var t=this,i=t.$createElement,a=t._self._c||i;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_02-从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？"}},[t._v("#")]),t._v(" 02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？")]),t._v(" "),a("p",[t._v("对于代码的质量评定往往有很多个维度：")]),t._v(" "),a("blockquote",[a("p",[t._v("灵活性（flexibility）、可扩展性（extensibility）、可维护性（maintainability）、可读性（readability）、可理解性（understandability）、易修改性（changeability）、可复用（reusability）、可测试性（testability）、模块化（modularity）、高内聚低耦合（high cohesion loose coupling）、高效（high effciency）、高性能（high performance）、安全性（security）、兼容性（compatibility）、易用性（usability）、整洁（clean）、清晰（clarity）、简单（simple）、直接（straightforward）、少即是多（less code is more）、文档详尽（well-documented）、分层清晰（well-layered）、正确性（correctness、bug free）、健壮性（robustness）、鲁棒性（robustness）、可用性（reliability）、可伸缩性（scalability）、稳定性（stability）、优雅（elegant）、好（good）、坏（bad）……")])]),t._v(" "),a("p",[t._v("并且由于不同工程师对代码维护能力的不一致，所以对于代码质量高低的评定也是十分主观的，但我们仍然可以遵循几个最核心的标准对代码质量进行评定。")]),t._v(" "),a("h3",{attrs:{id:"_1-可维护性（maintainability）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-可维护性（maintainability）"}},[t._v("#")]),t._v(" 1. 可维护性（maintainability）")]),t._v(" "),a("p",[t._v("从正面去分析一个代码是否易维护稍微有点难度。不过，我们可以从侧面上给出一个比较主观但又比较准确的感受。如果 "),a("strong",[t._v("bug 容易修复，修改、添加功能能够轻松完成")]),t._v("，那我们就可以主观地认为代码对我们来说易维护。相反，如果修改一个 bug，修改、添加一个功能，需要花费很长的时间，那我们就可以主观地认为代码对我们来说不易维护。")]),t._v(" "),a("h3",{attrs:{id:"_2-可读性（readability）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-可读性（readability）"}},[t._v("#")]),t._v(" 2. 可读性（readability）")]),t._v(" "),a("p",[t._v("代码的可读性应该是评价代码质量最重要的指标之一。我们在编写代码的时候，时刻要考虑到代码是否易读、易理解。")]),t._v(" "),a("p",[t._v("我们需要看代码是否符合编码规范、命名是否达意、注释是否详尽、函数是否长短合适、模块划分是否清晰、是否符合高内聚低耦合等等。")]),t._v(" "),a("h3",{attrs:{id:"_3-可扩展性（extensibility）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-可扩展性（extensibility）"}},[t._v("#")]),t._v(" 3. 可扩展性（extensibility）")]),t._v(" "),a("p",[t._v("代码的可扩展性表示，我们在不修改或少量修改原有代码的情况下，通过扩展的方式添加新的功能代码。说直白点就是，代码预留了一些功能扩展点，你可以把新功能代码，直接插到扩展点上，而不需要因为要添加一个功能而大动干戈，改动大量的原始代码。")]),t._v(" "),a("p",[t._v("代码的扩展性，要遵循“对修改关闭，对扩展开放”的设计原则。")]),t._v(" "),a("h3",{attrs:{id:"_4-灵活性（flexibility）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-灵活性（flexibility）"}},[t._v("#")]),t._v(" 4. 灵活性（flexibility）")]),t._v(" "),a("p",[t._v("灵活性是一个挺抽象的评价标准，要给灵活性下个定义也是挺难的，但以下场景可以可以作为灵活性的一个参考。")]),t._v(" "),a("ul",[a("li",[t._v("当我们添加一个新的功能代码的时候，原有的代码已经预留好了扩展点，我们不需要修改原有的代码，只要在扩展点上添加新的代码即可。这个时候，我们除了可以说代码易扩展，还可以说代码写得好灵活。")]),t._v(" "),a("li",[t._v("当我们要实现一个功能的时候，发现原有代码中，已经抽象出了很多底层可以复用的模块、类等代码，我们可以拿来直接使用。这个时候，我们除了可以说代码易复用之外，还可以说代码写得好灵活。")]),t._v(" "),a("li",[t._v("当我们使用某组接口的时候，如果这组接口可以应对各种使用场景，满足各种不同的需求，我们除了可以说接口易用之外，还可以说这个接口设计得好灵活或者代码写得好灵活。")])]),t._v(" "),a("p",[t._v("如果一段代码易扩展、易复用或者易用，我们都可以称这段代码写得比较灵活。")]),t._v(" "),a("h3",{attrs:{id:"_5-简洁性（simplicity）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-简洁性（simplicity）"}},[t._v("#")]),t._v(" 5. 简洁性（simplicity）")]),t._v(" "),a("p",[t._v("KISS 原则：“Keep It Simple，Stupid”。这个原则说的意思就是，尽量保持代码简单。代码简单、逻辑清晰，也就意味着易读、易维护。")]),t._v(" "),a("p",[a("strong",[t._v("思从深而行从简，真正的高手能云淡风轻地用最简单的方法解决最复杂的问题。")])]),t._v(" "),a("h3",{attrs:{id:"_6-可复用性（reusability）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-可复用性（reusability）"}},[t._v("#")]),t._v(" 6. 可复用性（reusability）")]),t._v(" "),a("p",[t._v("代码的可复用性可以简单地理解为，尽量减少重复代码的编写，复用已有的代码。")]),t._v(" "),a("p",[t._v("当讲到面向对象特性的时候，我们会讲到继承、多态存在的目的之一，就是为了提高代码的可复用性；当讲到设计原则的时候，我们会讲到单一职责原则也跟代码的可复用性相关；当讲到重构技巧的时候，我们会讲到解耦、高内聚、模块化等都能提高代码的可复用性。")]),t._v(" "),a("h3",{attrs:{id:"_7-可测试性（testability）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-可测试性（testability）"}},[t._v("#")]),t._v(" 7. 可测试性（testability）")]),t._v(" "),a("p",[t._v("相对于前面六个评价标准，代码的可测试性是一个相对较少被提及，但又非常重要的代码质量评价标准。代码可测试性的好坏，能从侧面上非常准确地反应代码质量的好坏。")]),t._v(" "),a("p",[t._v("代码的可测试性差，比较难写单元测试，那基本上就能说明代码设计得有问题。")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("代码质量的评价有很强的主观性，需要从不同的维度去进行评定。")]),t._v(" "),a("p",[t._v("最常用到几个评判代码质量的标准是：可维护性、可读性、可扩展性、灵活性、简洁性、可复用性、可测试性。其中，"),a("strong",[t._v("可维护性、可读性、可扩展性")]),t._v("又是提到最多的、最重要的三个评价标准。")])])}),[],!1,null,null,null);i.default=s.exports}}]);