(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{928:function(_,v,t){"use strict";t.r(v);var s=t(70),e=Object(s.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"tcp-协议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议"}},[_._v("#")]),_._v(" TCP 协议")]),_._v(" "),t("h2",{attrs:{id:"_1-什么是-tcp-？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是-tcp-？"}},[_._v("#")]),_._v(" 1. 什么是 TCP ？")]),_._v(" "),t("p",[_._v("传输控制协议（TCP，Transmission Control Protocol）是一种面向连接的、可靠的、基于字节流的传输层通信协议。")]),_._v(" "),t("p",[_._v("建立 TCP 连接需要经过三次握手，断开 TCP 连接需要经过四次挥手，如下图：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/zhxuankun/Image/raw/master/blog/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16208094825841.png",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_1-1-建立连接-三次握手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-建立连接-三次握手"}},[_._v("#")]),_._v(" 1.1 建立连接-三次握手")]),_._v(" "),t("ol",[t("li",[_._v("客户端发送 SYN 包 (syn=x) 到服务器，并进入 "),t("code",[_._v("SYN_SEND")]),_._v(" 状态，等待服务器确认;")]),_._v(" "),t("li",[_._v("服務端收到 SYN 包，返回代表自身的 SYN(syn=y) 及代表確認收到並應答的 ACK(ack=x+1) 包，進入 "),t("code",[_._v("SYN_RCVD")]),_._v(" 狀態；")]),_._v(" "),t("li",[_._v("客戶端收到服務端的 "),t("code",[_._v("SYN")]),_._v(" 跟 "),t("code",[_._v("ACK")]),_._v(" 后，返回代表確認的 ACK(y+1) 包。雙方進入 "),t("code",[_._v("ESTABLISHED")]),_._v(" 狀態。")])]),_._v(" "),t("h3",{attrs:{id:"_1-2-断开连接-四次挥手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-断开连接-四次挥手"}},[_._v("#")]),_._v(" 1.2 断开连接-四次挥手")]),_._v(" "),t("p",[_._v("连接的其中一端调用 close 发起断开，则称该端执行 “主动关闭”（active close），對應接受的端執行“被动关闭”（passive close）。断开连接需要经过四次挥手，过程如下：")]),_._v(" "),t("ol",[t("li",[_._v("主动关闭端發送一个 "),t("code",[_._v("FIN")]),_._v(" 包，表示数据发送完毕，進入 "),t("code",[_._v("ESTABLISHED -> FIN_WAIT_1")]),_._v(" 狀態。\n"),t("ul",[t("li",[t("code",[_._v("FIN")]),_._v(" "),t("strong",[_._v("会被放在被動端排隊等候的任何其他数据之后")]),_._v("。")])])]),_._v(" "),t("li",[_._v("被動端接收到 FIN 并处理后，返回一個 ACK，進入 "),t("code",[_._v("ESTABLISHED -> CLOSE_WAIT")]),_._v(" 狀態，此時若有數據则會繼續發送。\n"),t("ul",[t("li",[_._v("主動端接收到 ACK 后，進入 "),t("code",[_._v("FIN_WAIT_1 -> FIN_WAIT_2")]),_._v(" 狀態，之后等待對方發送完數據。")])])]),_._v(" "),t("li",[_._v("被動端傳輸完數據後，也發送一個 FIN 報文，進入"),t("code",[_._v("CLOSE_WAIT -> LAST_ACK")]),_._v(" 狀態。")]),_._v(" "),t("li",[_._v("主動方收到了对方的 "),t("code",[_._v("FIN")]),_._v(" 报文，并发送出了 "),t("code",[_._v("ACK")]),_._v(" 报文，进入 "),t("code",[_._v("FIN_WAIT_2 -> TIME_WAIT")]),_._v(" 状态，等待 "),t("code",[_._v("2MSL")]),_._v("（2min/MSL） 后进入 "),t("code",[_._v("CLOSED")]),_._v(" 状态，释放端口。\n"),t("ul",[t("li",[_._v("被动接受端接收到 ACK 后，进入 "),t("code",[_._v("LAST_ACK -> CLOESD")]),_._v(" 状态，释放端口。")]),_._v(" "),t("li",[_._v("主动方如果在 "),t("code",[_._v("FIN_WAIT_1")]),_._v(" 状态下，收到了对方同时带 "),t("code",[_._v("FIN")]),_._v(" 标志和 "),t("code",[_._v("ACK")]),_._v(" 标志的报文，可以直接 "),t("code",[_._v("FIN_WAIT_1 -> TIME_WAIT")]),_._v(" 状态，而无须经过 "),t("code",[_._v("FIN_WAIT_1 -> FIN_WAIT_2 -> TIME_WAIT")]),_._v(" 状态。")])])])]),_._v(" "),t("h2",{attrs:{id:"_2-tcp-重试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-tcp-重试"}},[_._v("#")]),_._v(" 2. TCP 重试")]),_._v(" "),t("p",[t("code",[_._v("net.ipv4.tcp_syn_retries")]),_._v(" 决定了一个 client 端在执行 connect 后，在对方不返回 SYN + ACK 的情况下（即超时），最多会尝试几次，默认值为 5。")]),_._v(" "),t("p",[_._v("tcp 每次尝试连接的间隔是不一样的，第一次尝试间隔为 1s，第二次为 2s，第三次为 4s，按照 2 的幂次方逐步增加， 5 次尝试最终会耗费 63s。")]),_._v(" "),t("blockquote",[t("p",[_._v("NOTE：应用层真正的连接超时时间受限于 127s，并且如果超时时间不管设置为 4s 还是 5s，最终 tcp 也只会重试 2 次。")])]),_._v(" "),t("h2",{attrs:{id:"_3-思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-思考"}},[_._v("#")]),_._v(" 3. 思考")]),_._v(" "),t("h4",{attrs:{id:"_1-为什么需要-time-wait-状态？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么需要-time-wait-状态？"}},[_._v("#")]),_._v(" "),t("strong",[_._v("1. 为什么需要 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态？")])]),_._v(" "),t("p",[_._v("主要有两个原因：")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("避免迟到的数据被认为是新连接")]),_._v("：主动发起断开连接的一端，在发送完最后一个 ACK 后，"),t("strong",[_._v("仍有可能接收到来自对端的数据（如网络抖动、延迟等因素）")]),_._v("，为了避免其被认为是一个新的 TCP 连接，需要一个状态来标记为端口暂时不可用，直到延迟到达的数据消失，这就是 TIME_WAIT 的作用之一，通常该状态维持 2MSL。")]),_._v(" "),t("li",[t("strong",[_._v("避免对端没有接收到最后的 ACK")]),_._v("：TCP 为了实现可靠的全双工连接的终止，需要考虑到主动发起端在接收到对端的 FIN 后发送最终的 ACK 时可能会因为网络等种种因素没有到达对端，这时对端会再次发送 FIN ，需要一个 "),t("code",[_._v("TIME_WAITE")]),_._v(" 状态能够处理重新接收到的 FIN。")])]),_._v(" "),t("h4",{attrs:{id:"_2-如果主动关闭端进入-time-wait-状态后，对端立刻复用同个端口会发生什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-如果主动关闭端进入-time-wait-状态后，对端立刻复用同个端口会发生什么？"}},[_._v("#")]),_._v(" 2. 如果主动关闭端进入 TIME_WAIT 状态后，对端立刻复用同个端口会发生什么？")]),_._v(" "),t("ol",[t("li",[_._v("对端发起一个 SYN。")]),_._v(" "),t("li",[_._v("由于正处于 "),t("code",[_._v("TIME_WAIT")]),_._v(" 状态，主动关闭端会认为该报文属于 “迟到” 的报文，因此会重新发送之前四次挥手时最后的 ACK 报文。")]),_._v(" "),t("li",[_._v("对端接收到 ACK 报文，发现跟自己发起的 SYN 中的 Seq 对不上，于是发送一个 RST 报文。")]),_._v(" "),t("li",[_._v("主动关闭端接收到 RST 报文后，立刻进入 "),t("code",[_._v("CLOSED")]),_._v(" 状态。")]),_._v(" "),t("li",[_._v("对端重新发送之前的 SYN，开始重新三次握手建立连接。")])]),_._v(" "),t("p",[_._v("也就是说，持有一定数量的 TIME_WAIT 并不碍事，对端可以通过 RST 报文立刻重新进行三次握手，但要注意 DDOS 攻击会造成大量 TIME_WAIT，浪费服务器内存。")]),_._v(" "),t("h4",{attrs:{id:"_3-什么是-rst-报文？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是-rst-报文？"}},[_._v("#")]),_._v(" 3. 什么是 RST 报文？")]),_._v(" "),t("p",[_._v("RST（Reset the connection），TCP 报文的其中一种，在接收到 RST 报文后，无论当前连接处于什么状态，都立即进入 "),t("code",[_._v("CLOSED")]),_._v(" 状态。")]),_._v(" "),t("h4",{attrs:{id:"_4-什么时候会发送-rst-报文？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么时候会发送-rst-报文？"}},[_._v("#")]),_._v(" 4. 什么时候会发送 RST 报文？")]),_._v(" "),t("ol",[t("li",[_._v("connect 一个不存在的端口；\n"),t("ul",[t("li",[_._v("通常来讲，为了避免被外部通过此方式扫描到该端口是否有在提供端口，位于不明连接通常是不返回任何报文较为安全。")])])]),_._v(" "),t("li",[_._v("A 要与 B 建立连接，A 发送报文的时间超过了 B 的超时时间，B会返回一个 RST；")]),_._v(" "),t("li",[_._v("TCP 想要放弃一个当前已有的连接：\n"),t("ul",[t("li",[_._v("比如客户端连接服务器，触发了服务器安全入侵策略，服务器发送 RST 中断连接。")])])]),_._v(" "),t("li",[_._v("接收到了一个并不存在当前记录信息的报文：\n"),t("ul",[t("li",[_._v("比如前面提到的端口复用")]),_._v(" "),t("li",[_._v("比如某服务器重启，客户端却又保留着之前的连接")])])])]),_._v(" "),t("h2",{attrs:{id:"_4-实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-实践"}},[_._v("#")]),_._v(" 4. 实践")]),_._v(" "),t("h3",{attrs:{id:"_4-1-超时测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-超时测试"}},[_._v("#")]),_._v(" 4.1 超时测试")]),_._v(" "),t("ol",[t("li",[_._v("丢弃 9999 端口的数据："),t("code",[_._v("iptables -A INPUT --protocol tcp --dport 9999 --syn -j DROP")])]),_._v(" "),t("li",[_._v("监测 9999 端口："),t("code",[_._v("tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 9999")])]),_._v(" "),t("li",[_._v("根据 "),t("code",[_._v("net.ipv4.tcp_syn_retries")]),_._v(" 默认值为 6，总共会等待 127s")])])])}),[],!1,null,null,null);v.default=e.exports}}]);