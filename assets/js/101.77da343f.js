(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{829:function(t,e,n){"use strict";n.r(e);var a=n(70),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"design-pattern"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#design-pattern"}},[t._v("#")]),t._v(" Design Pattern")]),t._v(" "),n("p",[t._v("设计模式并不是软件工程中的银弹，如果生搬硬套，只会使得代码变得很奇怪，从而并不能达到提高可维护性这一目的。")]),t._v(" "),n("p",[t._v("公认的经典书籍《设计模式》出现的时间较早，当时的语言大多是面向对象的，然而近几年的语言都有多范式（e.g. 函数式编程，响应式编程等）的倾向，有些设计模式实现起来很麻烦，然而在其他编程风格下就可以很容易的实现，比如 Scala 使用偏函数实现责任链模式，Object-C 实现观察者模式等。")]),t._v(" "),n("p",[t._v("设计模式其实是一种通用的抽象经验，能够减少工程师之间沟通成本，但是这需要双方都对同一种设计模式有对等认知的，如果其中一方对其不甚了解，反而只会造成反效果。并且一些冷门的设计模式，往往也很少有人会去了解。")]),t._v(" "),n("p",[t._v("将一些具体的设计抽象出来很容易，但是将抽象的概念应用到具体却很困难，这需要经验的积累。因此个人认为，学习设计模式最快的方式是多看那些优秀项目的源码，学习他们的设计模式，同时在必要时学习一定的理论。")])])}),[],!1,null,null,null);e.default=s.exports}}]);