(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{818:function(_,v,t){"use strict";t.r(v);var a=t(70),e=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_15-二叉树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-二叉树"}},[_._v("#")]),_._v(" 15 | 二叉树")]),_._v(" "),t("p",[_._v("二叉查找树由于在数据的动态更新过程中，可能出现性能倒退，因此我们需要一种"),t("strong",[_._v("平衡二叉树")]),_._v("，能够通过自平衡来保持其高效性，常见的二叉平衡树有 "),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/AVL%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[_._v("AVL树"),t("OutboundLink")],1),_._v("，"),t("strong",[_._v("红黑树")]),_._v("等。")]),_._v(" "),t("p",[t("strong",[_._v("平衡二叉树")]),_._v("：二叉树中任意一个节点的左右子树的高度相差不能大于 1。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/dd/9b/dd9f5a4525f5029a8339c89ad1c8159b.jpg",alt:""}})]),_._v(" "),t("p",[_._v("AVL树是一种高度自平衡的树，严格遵循平衡二叉树的定义，但其实其他很多平衡二叉树并不完全遵守该定义（树中任意一个节点的左右子树的高度相差不能大于 1），但反而更加高效、稳定。比如红黑树，它从根节点到各个叶子节点的最长路径，有可能会比最短路径大一倍。")]),_._v(" "),t("p",[_._v("其实此处平衡的定义是"),t("strong",[_._v("尽量让左右子树的深度不要相差太大")]),_._v("，只要树的高度不比 log2n 大很多（比如树的高度仍然是对数量级的），那么我们仍然可以说这是一棵平衡二叉树。")]),_._v(" "),t("p",[_._v("而其中综合起来最稳定、高效的平衡二叉树实现就是红黑树。")]),_._v(" "),t("h2",{attrs:{id:"_1-红黑树（r-b-tree）的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-红黑树（r-b-tree）的定义"}},[_._v("#")]),_._v(" 1. 红黑树（R-B Tree）的定义")]),_._v(" "),t("p",[_._v("红黑树是一种不完全的平衡二叉树，并不完全遵循平衡二叉树的定义。")]),_._v(" "),t("p",[_._v("红黑树有几个定义如下：")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("红黑树中的节点，一类被标记为黑色，一类被标记为红色；")])]),_._v(" "),t("li",[t("strong",[_._v("根节点是黑色的；")])]),_._v(" "),t("li",[t("strong",[_._v("每个叶子节点都是黑色的空节点（NIL），叶子节点并不存储数据；")])]),_._v(" "),t("li",[t("strong",[_._v("任何相邻的节点都不能同时为红色，红色节点是被黑色节点隔开的；")])]),_._v(" "),t("li",[t("strong",[_._v("每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；")])])]),_._v(" "),t("p",[_._v("红黑树的叶子节点之所以要是黑色的空节点，目的是为了简化红黑树的代码实现，挤下来的介绍暂且忽略掉叶子节点。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/90/9a/903ee0dcb62bce2f5b47819541f9069a.jpg",alt:""}})]),_._v(" "),t("h2",{attrs:{id:"_2-平衡性分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-平衡性分析"}},[_._v("#")]),_._v(" 2. 平衡性分析")]),_._v(" "),t("p",[_._v("红黑树并不严格遵守平衡二叉树的定义，所以我们可以说其是近似平衡的，近似平衡就可以看成是性能并不会退化的太严重，接下来就来看下其平衡性分析。")]),_._v(" "),t("p",[_._v("我们可以先将红黑树的红色的节点都去掉，这样一来就变成了四叉树。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/7e/ed/7e6ecc308fe44120f30de809822215ed.jpg",alt:""}})]),_._v(" "),t("p",[_._v("红黑树的定义里有这么一条："),t("strong",[_._v("从任意节点到可达的叶子节点的每个路径包含相同数目的黑色节点")]),_._v("。")]),_._v(" "),t("p",[_._v("从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树。所以，仅包含黑色节点的四叉树的高度，比包含相同节点个数的完全二叉树的高度还要小。")]),_._v(" "),t("p",[_._v("完全二叉树的高度近似 log2n，这里的四叉“黑树”的高度要低于完全二叉树，所以去掉红色节点的“黑树”的高度也不会超过 log2n。")]),_._v(" "),t("p",[_._v("由于红黑树还有条定义：红色节点不能相邻，也就是说，每一个红色节点就得有一个黑色节点将其与其他红色节点隔开。我们将红色节点加回去，也就是高度会翻倍，最大不大于 2log2n，因此"),t("strong",[_._v("红黑树的高度近似 2log2n")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"_3-红黑树的插入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-红黑树的插入"}},[_._v("#")]),_._v(" 3. 红黑树的插入")]),_._v(" "),t("p",[_._v("红黑树只能插入红色节点，接着就是根据节点分布情况，进行"),t("strong",[_._v("颜色的变化")]),_._v("以及旋转进行调整，从而达到平衡。")]),_._v(" "),t("p",[_._v("红黑树的插入操作，往往会破坏以下两点：")]),_._v(" "),t("ul",[t("li",[_._v("任何相邻的节点都不能同时为红色，红色节点是被黑色节点隔开的；")]),_._v(" "),t("li",[_._v("每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。")])]),_._v(" "),t("p",[_._v("我们进行的调整就是为了恢复以上两点。")]),_._v(" "),t("p",[_._v("其中旋转分为"),t("strong",[_._v("左旋（rotate left）"),t("strong",[_._v("和")]),_._v("右旋（rotate right）")]),_._v("，过程如下：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/0e/1e/0e37e597737012593a93105ebbf4591e.jpg",alt:""}})]),_._v(" "),t("p",[_._v("红黑树规定，插"),t("strong",[_._v("入的节点必须是红色的。而且，二叉查找树中新插入的节点都是放在叶子节点上")]),_._v("。所以，关于插入操作的平衡调整，有这样两种特殊情况，是最好处理的：")]),_._v(" "),t("ul",[t("li",[_._v("如果插入节点的父节点是黑色的，那我们什么都不用做，它仍然满足红黑树的定义。")]),_._v(" "),t("li",[_._v("如果插入的节点是根节点，那我们直接改变它的颜色，把它变成黑色就可以了。")])]),_._v(" "),t("p",[_._v("挤下来对其余情况进行分析，为了方便描述，我们定义父节点的兄弟节点叫作叔叔节点，父节点的父节点叫作祖父节点。")]),_._v(" "),t("p",[t("strong",[_._v("CASE 1：如果关注节点是 a，它的叔叔节点 d 是红色：")])]),_._v(" "),t("ul",[t("li",[_._v("将关注节点 a 的父节点 b 、叔叔节点 d 的颜色都改为黑色；")]),_._v(" "),t("li",[_._v("将关注节点 a 的祖父节点 c 改为红色；")]),_._v(" "),t("li",[_._v("关注节点从 a 变为祖父节点 c ；")]),_._v(" "),t("li",[_._v("跳到 CASE 2 或 CASE 3。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/60/40/603cf91f54b5db21bd02c6c5678ecf40.jpg",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("CASE 2：如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的右子节点：")])]),_._v(" "),t("ul",[t("li",[_._v("关注节点从 a 变为父节点 b；")]),_._v(" "),t("li",[_._v("对关注节点 b 进行左旋；")]),_._v(" "),t("li",[_._v("跳到 CASE 3。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/44/ad/4480a314f9d83c343b8adbb28b6782ad.jpg",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("CASE 3：如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的左子节点：")])]),_._v(" "),t("ul",[t("li",[_._v("对关注节点 a 的祖父节点 c 进行右旋，从而 c 变成 a 的兄弟节点；")]),_._v(" "),t("li",[_._v("将关注节点 a 的父节点 b 以及兄弟节点 c 的颜色进行互换；")]),_._v(" "),t("li",[_._v("调整结束。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/04/12/04650d9470b1e67899f5b8b7b8e33212.jpg",alt:""}})]),_._v(" "),t("h2",{attrs:{id:"_4-红黑树的删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-红黑树的删除"}},[_._v("#")]),_._v(" 4. 红黑树的删除")]),_._v(" "),t("p",[_._v("红黑树节点的删除较为复杂，需要拆分为两大步：初次调整以及二次调整。")]),_._v(" "),t("p",[_._v("初次调整主要是为了让红黑树仍然满足最后一条定义：每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点。")]),_._v(" "),t("p",[_._v("二次调整是为了满足第三条定义：即不存在相邻的两个红色节点。")]),_._v(" "),t("h3",{attrs:{id:"_4-1-针对删除节点的初次调整"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-针对删除节点的初次调整"}},[_._v("#")]),_._v(" 4.1 针对删除节点的初次调整")]),_._v(" "),t("p",[_._v("红黑树的定义中“只包含红色节点和黑色节点”，经过初步调整之后，为了保证满足红黑树定义的最后一条要求，有些节点会被标记成两种颜色，“红 - 黑”或者“黑 - 黑”。")]),_._v(" "),t("p",[_._v("如果一个节点被标记为了“黑 - 黑”，那在计算黑色节点个数的时候，要算成两个黑色节点。")]),_._v(" "),t("p",[_._v("如果一个节点既可以是红色，也可以是黑色，在画图的时候，我会用一半红色一半黑色来表示。")]),_._v(" "),t("p",[_._v("如果一个节点是“红 - 黑”或者“黑 - 黑”，我会用左上角的一个小黑点来表示额外的黑色。")]),_._v(" "),t("p",[t("strong",[_._v("CASE 1：如果要删除的节点是 a，它只有一个子节点 b：")])]),_._v(" "),t("ul",[t("li",[_._v("删除节点 a ，并将 b 替换到 a 的位置上，这跟原来的二叉树操作的操作一样；")]),_._v(" "),t("li",[_._v("节点 a 为黑色，因此为了保证每个路径黑色节点书一样， b 要跟着变为黑色；")]),_._v(" "),t("li",[_._v("初次调整结束，无需后续调整。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/a6/c3/a6c4c347b7cbdf57662bab399ed36cc3.jpg",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("CASE 2：如果要删除的节点 a 有两个非空子节点，并且它的后继节点就是节点 a 的右子节点 c：")])]),_._v(" "),t("ul",[t("li",[_._v("后继节点是 c 的话，那么 c 肯定没有左子树，因此将 c 替换到节点 a 上；")]),_._v(" "),t("li",[_._v("c 要调整为跟 a 一样的颜色；")]),_._v(" "),t("li",[_._v("如果 c 是黑色，为了补充 c 的黑色， d 要跟着补充一个黑色，这时候 d 就变成了 “红-黑” 或者 ”黑-黑“ 了；")]),_._v(" "),t("li",[_._v("关注节点变为 d ，后续的二次调整会针对 d 进行。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/48/4e/48e3bd2cdd66cb635f8a4df8fb8fd64e.jpg",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("CASE 3：如果要删除的是节点 a，它有两个非空子节点，并且节点 a 的后继节点不是右子节点：")])]),_._v(" "),t("ul",[t("li",[_._v("找到后继节点 d ，将其删除，删除的操作参照 CASE 1；")]),_._v(" "),t("li",[_._v("将节点 d 替换到 a 的位置上，并调整为跟 a 一样的颜色；")]),_._v(" "),t("li",[_._v("如果节点 d 是黑色，为了补充 d 的黑色， c 要跟着补充一个黑色，我们给 d 的右子节点 c 添加一个黑色，这时候节点 c 的颜色就变成了 “红-黑” 或者 “黑-黑”。")]),_._v(" "),t("li",[_._v("关注节点变为 c ，后续的二次调整会针对 c 进行。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b9/29/b93c1fa4de16aee5482424ddf49f3c29.jpg",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"_4-2-二次调整"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-二次调整"}},[_._v("#")]),_._v(" 4.2 二次调整")]),_._v(" "),t("p",[_._v("经过初次调整后，有些节点变成了 “红-黑” 或者 “黑-黑” 节点，接下来的二次调整就是为了让树中不存在相邻的红色节点。")]),_._v(" "),t("p",[_._v("接下来就是针对初次调整后输出的关注节点进行二次调整，分为四种情况：")]),_._v(" "),t("p",[t("strong",[_._v("CASE 1：如果关注节点是 a，它的兄弟节点 c 是红色的：")])]),_._v(" "),t("ul",[t("li",[_._v("围绕关注节点 a 的父节点 b 左旋；")]),_._v(" "),t("li",[_._v("关注节点 a 的父节点 b 和祖父节点 c 交换颜色；")]),_._v(" "),t("li",[_._v("关注节点不变；")]),_._v(" "),t("li",[_._v("继续从四种情况中选择适合的规则来调整。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/ac/91/ac76d78c064a2486e2a5b4c4903acb91.jpg",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("CASE 2：如果关注节点是 a，它的兄弟节点 c 是黑色的，并且节点 c 的左右子节点 d、e 都是黑色的：")])]),_._v(" "),t("ul",[t("li",[_._v("将关注节点 a 的兄弟节点 c 的颜色变成红色；")]),_._v(" "),t("li",[_._v("从关注节点 a 中去掉一个黑色，这个时候节点 a 就是单纯的红色或者黑色；")]),_._v(" "),t("li",[_._v("给关注节点 a 的父节点 b 添加一个黑色，这个时候节点 b 就变成了“红 - 黑”或者“黑 - 黑”；")]),_._v(" "),t("li",[_._v("关注节点从 a 变成其父节点 b；")]),_._v(" "),t("li",[_._v("继续从四种情况中选择符合的规则来调整。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/ec/ec/eca118d673c607eb2b103f3476fb24ec.jpg",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("CASE 3：如果关注节点是 a，它的兄弟节点 c 是黑色，c 的左子节点 d 是红色，c 的右子节点 e 是黑色：")])]),_._v(" "),t("ul",[t("li",[_._v("围绕关注节点 a 的兄弟节点 c 右旋；")]),_._v(" "),t("li",[_._v("节点 c 和节点 d 交换颜色；")]),_._v(" "),t("li",[_._v("关注节点不变；")]),_._v(" "),t("li",[_._v("跳转到 CASE 4，继续调整。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/44/af/44075213100edd70315e1492422c92af.jpg",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("CASE 4：如果关注节点 a 的兄弟节点 c 是黑色的，并且 c 的右子节点是红色的：")])]),_._v(" "),t("ul",[t("li",[_._v("围绕关注节点 a 的父节点 b 左旋；")]),_._v(" "),t("li",[_._v("将关注节点 a 的兄弟节点 c 的颜色，跟关注节点 a 的父节点 b 互换颜色；")]),_._v(" "),t("li",[_._v("从关注节点 a 中去掉一个黑色，节点 a 就变成了单纯的红色或者黑色；")]),_._v(" "),t("li",[_._v("将关注节点 a 的叔叔节点 e 设置为黑色；")]),_._v(" "),t("li",[_._v("调整结束。")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/5f/44/5f73f61bf77a7f2bb75f168cf432ec44.jpg",alt:""}})]),_._v(" "),t("h2",{attrs:{id:"思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[_._v("#")]),_._v(" 思考")]),_._v(" "),t("p",[t("strong",[_._v("Q：为什么红黑树的定义中，要求叶子节点是黑色的空节点？")])]),_._v(" "),t("blockquote",[t("p",[_._v("只是为了方便实现红黑树，假如没有叶子节点为黑色空节点的话，当我们插入一个节点（红色）的时候如下图：")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/d9/c9/d9d1ce7d6bf3da4888f39f9d15be99c9.jpg",alt:""}})]),_._v(" "),t("p",[_._v("这样并不符合前面任何一个case，虽然我们也可以改规则，比如改为“如果关注节点 a 的叔叔节点 b 是黑色或者不存在，a 是父节点的右子节点，就进行某某操作”，但就没有原来简洁了。")])]),_._v(" "),t("p",[t("strong",[_._v("Q：给红黑树添加黑色的空的叶子节点，会不会比较浪费存储空间呢？")])]),_._v(" "),t("blockquote",[t("p",[_._v("具体实现的时候，只需要一个黑色的、空的叶子节点就行了。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://static001.geekbang.org/resource/image/d6/66/d63231acb0e9d54c3469055d8dbdb366.jpg",alt:""}})])])])}),[],!1,null,null,null);v.default=e.exports}}]);