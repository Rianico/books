(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{774:function(t,a,s){"use strict";s.r(a);var e=s(70),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-多线程情况下-while-loop-条件的退出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-多线程情况下-while-loop-条件的退出"}},[t._v("#")]),t._v(" Java 多线程情况下 while loop 条件的退出")]),t._v(" "),s("p",[t._v("这几天在掘金上看到一篇很有意思的文章"),s("a",{attrs:{href:"https://juejin.im/post/5e7771446fb9a07cce7507f2",target:"_blank",rel:"noopener noreferrer"}},[t._v("【编程玄学】一个困扰我122天的技术问题，我好像知道答案了。"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("里面提及到一段代码：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VolatileExample")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                flag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"修改为true"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n         "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[t._v("请问，这个程序能不能正常结束？")]),t._v(" "),s("p",[t._v("稍微有点基础的 Java 开发人员都会说不能，"),s("strong",[t._v("因为变量 flag 不是 volatile 类型的，一个线程对 flag 做出的修改，另一个线程无法看到")]),t._v("，因此这里会导致 while 循环的条件恒为 true，从而进入无限循环。")]),t._v(" "),s("p",[t._v("其实这里面包含的东西不仅仅那么简单， 实际上，一个线程对某个公共变量做出的修改， "),s("strong",[t._v("在变量不是 volatile 类型的前提下，Java 内存模型只能保证其他线程尽可能的看到该变量的修改（而 volatile 是一定能够看到）")]),t._v("。")]),t._v(" "),s("p",[t._v("这个结论与一般直觉相背，因为如果这么说的话，那么上面的程序应该是应该能够正常结束的，但实际运行的结果是程序无法正常结束。")]),t._v(" "),s("p",[t._v("这里先卖个关子（tips：与 JIT 有关），接下来下面逐个介绍可以令程序正常结束的 n 种方式。")]),t._v(" "),s("h2",{attrs:{id:"_1-flag-设置为-volatile-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-flag-设置为-volatile-类型"}},[t._v("#")]),t._v(" 1. flag 设置为 volatile 类型")]),t._v(" "),s("p",[t._v("这应该是个老生常谈的方法，当 flag 为 volatile 类型的时候，Java 内存模型保证一个线程对该变量做出的修改，其他线程一定能够看到，但这里要注意 volatile 并不保证复合操作（e.g. i++）能够立刻被其他线程看到。")]),t._v(" "),s("h2",{attrs:{id:"_2-while-loop-中添加-synchronized-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-while-loop-中添加-synchronized-关键字"}},[t._v("#")]),t._v(" 2.while loop 中添加 synchronized 关键字")]),t._v(" "),s("p",[t._v("其实 volatile 可以看成是轻量级的 synchronized，在 Java 内存模型中，这两个关键字都有以下内存语义：")]),t._v(" "),s("ul",[s("li",[t._v("当前线程的写操作，会强制刷新到主存中。")]),t._v(" "),s("li",[t._v("当前线程的读操作，会强制先从主存中获取。")])]),t._v(" "),s("p",[t._v("上面两句的说法并不严谨，但这里不是重点，重点是由于存在上述两个内存语义，可以让 volatile 以及 synchronized 能够在多线程环境下读取到正确的变量。")]),t._v(" "),s("p",[t._v("while 循环代码如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看源代码，可以发现 System.out.println 里面有个 synchronized 关键字")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h2",{attrs:{id:"_3-while-循环里执行-sleep-、yield"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-while-循环里执行-sleep-、yield"}},[t._v("#")]),t._v(" 3. while 循环里执行 sleep()、yield()")]),t._v(" "),s("p",[t._v("这个停止的方式可能不那么常见了，代码如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("或许很多人会想，"),s("code",[t._v("Thread.sleep()")]),t._v(" 是不是也有类似锁的内存语义，答案是并没有。")]),t._v(" "),s("p",[t._v("其实这里的原理在官方文档有介绍过，链接："),s("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("17.3. Sleep and Yield"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("其中有这么一段话：")]),t._v(" "),s("blockquote",[s("p",[t._v("It is important to note that neither "),s("code",[t._v("Thread.sleep")]),t._v(" nor "),s("code",[t._v("Thread.yield")]),t._v(" have any synchronization semantics. In particular, the compiler does not have to flush writes cached in registers out to shared memory before a call to "),s("code",[t._v("Thread.sleep")]),t._v(" or "),s("code",[t._v("Thread.yield")]),t._v(", nor does the compiler have to reload values cached in registers after a call to "),s("code",[t._v("Thread.sleep")]),t._v(" or "),s("code",[t._v("Thread.yield")]),t._v(".")])]),t._v(" "),s("p",[t._v("这段话明确说明了，sleep 以及 yield 是没有同步语义的，也不需要像 volatile 以及 synchronized 一样会强制刷新结果到内存，以及强制从内存中读取结果，但是下面还有一段：")]),t._v(" "),s("blockquote",[s("p",[t._v("For example, in the following (broken) code fragment, assume that "),s("code",[t._v("this.done")]),t._v(" is a non-"),s("code",[t._v("volatile boolean")]),t._v(" field:")]),t._v(" "),s("p",[t._v("while (!this.done) Thread.sleep(1000);")]),t._v(" "),s("p",[t._v("The compiler is free to read the field "),s("code",[t._v("this.done")]),t._v(" just once, and reuse the cached value in each execution of the loop. This would mean that the loop would never terminate, even if another thread changed the value of "),s("code",[t._v("this.done")]),t._v(".")])]),t._v(" "),s("p",[t._v("The compiler is "),s("strong",[t._v("free")]),t._v(" to read the field "),s("code",[t._v("this.done")]),t._v(" just once, and reuse the cached value in each execution of the loop. 这句话是重点，free 用的很精髓，也就是说，如果在循环中使用了 sleep()、yeild() 方法，编译器可能会重新从主存中重新读取变量，也可能不会。")]),t._v(" "),s("h2",{attrs:{id:"_4-禁用-jit-优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-禁用-jit-优化"}},[t._v("#")]),t._v(" 4. 禁用 JIT 优化")]),t._v(" "),s("p",[t._v("从这里开始要开始论证 "),s("strong",[t._v("在变量不是 volatile 类型的前提下，Java 内存模型只能保证其他线程尽可能的看到该变量的修改（而 volatile 是一定能够看到）")]),t._v(" 这句话了。")]),t._v(" "),s("p",[t._v("在我们运行最开始的程序的之前，可以加上 "),s("code",[t._v("-Djava.compiler=NONE")]),t._v(" 禁用 JIT 编译，运行结果如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Rianico/Image/master/ARTS_Tips/Snipaste_2020-05-04_12-49-21.png",alt:"image"}})]),t._v(" "),s("p",[t._v("可以看到，程序居然正常结束了！")]),t._v(" "),s("p",[t._v("所以可以证明前面的结论："),s("strong",[t._v("在变量不是 volatile 类型的前提下，Java 内存模型只能保证其他线程尽可能的看到该变量的修改（而 volatile 是一定能够看到）")]),t._v(" 。之所以我们常见到的程序不能正常结束的原因，就是 JIT 搞的鬼。")]),t._v(" "),s("p",[t._v("那么 JIT 做了什么事情？其实这是编译器为我们做的一个优化，当一个代码被判定为热点代码的时候，编译器会对其做一个优化提升，而在这里做的一个优化便是"),s("strong",[t._v("循环表达式外提（Loop Expression Hoisting）")]),t._v("，导致形成死循环。")]),t._v(" "),s("p",[t._v("JIT 优化后的代码可以看成如下：")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("由于修改 flag 的线程休眠了一段时间，导致 while 循环的次数超过了一定的次数，从而触发了 JIT 优化，造成了死循环。")]),t._v(" "),s("p",[t._v("从这句话，我们又可以衍生出一个方式，修改 flag 的线程如果不休眠，那么程序能否正常结束？")]),t._v(" "),s("p",[t._v("答案是能，运行结果如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Rianico/Image/master/ARTS_Tips/image-20200504130107956.png",alt:"image"}})]),t._v(" "),s("p",[t._v("这里不做休眠，从而让 while 循环不会成为热点代码，也就不会触发 JIT 的优化了。")]),t._v(" "),s("h2",{attrs:{id:"_5-修改-i-为-volatile-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-修改-i-为-volatile-类型"}},[t._v("#")]),t._v(" 5. 修改 i 为 volatile 类型")]),t._v(" "),s("p",[t._v("我们将 i 修改为 volatile 也能达到同样的效果：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Rianico/Image/master/ARTS_Tips/Snipaste_2020-05-04_13-04-16.png",alt:"image"}})]),t._v(" "),s("p",[t._v("但是 while 循环里判断的不是 flag 变量么？为什么 i 为 volatile 也可以正常结束？")]),t._v(" "),s("p",[t._v("其实线程一点，这里可以理解为跟循环体内有 synchronized 关键字一样，但是我们还可以再深一步挖掘，可以发现，最后还是跟 JIT 有关。")]),t._v(" "),s("p",[t._v("这里我使用 JITWatcher 来查看代码编译后的汇编代码。")]),t._v(" "),s("h3",{attrs:{id:"_5-1-修改-i-为-volatile-之前"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-修改-i-为-volatile-之前"}},[t._v("#")]),t._v(" 5.1 修改 i 为 volatile 之前")]),t._v(" "),s("p",[t._v("我们查看最开始的代码的汇编结果，其中 while 循环的汇编代码如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Rianico/Image/master/ARTS_Tips/Snipaste_2020-05-03_13-12-01.png",alt:"image"}})]),t._v(" "),s("p",[t._v("这里看不懂也没关系，只要看 L0000 跟 jmp L0000 之间的汇编代码后面提示的代码行数就行了，我这里 line 45 对应着 "),s("code",[t._v("i++")]),t._v("。可以看到，在 JIT 优化后，查看汇编结果，实际上代码一直就再也没有去到过 line 44（对应 "),s("code",[t._v("while(!flag)")]),t._v(" ）了。")]),t._v(" "),s("h3",{attrs:{id:"_5-2-修改-i-为-volatile-之后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-修改-i-为-volatile-之后"}},[t._v("#")]),t._v(" 5.2 修改 i 为 volatile 之后")]),t._v(" "),s("p",[t._v("接下来我们将 i 修改为 volatile 类型，查看汇编代码")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Rianico/Image/master/ARTS_Tips/Snipaste_2020-05-03_13-11-54.png",alt:"image"}})]),t._v(" "),s("p",[t._v("依然看不懂。。。不过没关系，我们可以看到在黄色部分执行的 "),s("code",[t._v("i++")]),t._v(" 操作后，下面又回到了 line 44，也就是实际程序又再一次重新去获取 flag 变量了！因此最终程序能够正常结束。")]),t._v(" "),s("h3",{attrs:{id:"_5-3-结论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-结论"}},[t._v("#")]),t._v(" 5.3 结论")]),t._v(" "),s("p",[t._v("当 while loop 里有 volatile、synchronized 这类有同步语义操作的时候，会对 JIT 产生一些影响。而这里就是令 JIT 不会产生死循环优化。")]),t._v(" "),s("h2",{attrs:{id:"_6-修改-i-为-integer-包装类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-修改-i-为-integer-包装类型"}},[t._v("#")]),t._v(" 6. 修改 i 为 Integer 包装类型")]),t._v(" "),s("p",[t._v("将 i 修改为 Integer 包装类型，运行结果如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://raw.githubusercontent.com/Rianico/Image/master/ARTS_Tips/Snipaste_2020-05-04_13-20-02.png",alt:"image"}})]),t._v(" "),s("p",[t._v("可以看到，程序居然也正常结束了。")]),t._v(" "),s("p",[t._v("但目前此处尚未探究明白，待后面在做研究。")]),t._v(" "),s("h2",{attrs:{id:"_7-结语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-结语"}},[t._v("#")]),t._v(" 7. 结语")]),t._v(" "),s("p",[t._v("虽然这道程序以前自己就看到过，但是说来惭愧，当时并没能够引起如此多的思考，而是在掘金看到那篇文章后才恍然醒悟。在这里感谢所有发布优质文章，分享自己思考成果的作者们。")]),t._v(" "),s("p",[t._v("参考列表：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.im/post/5e7771446fb9a07cce7507f2",target:"_blank",rel:"noopener noreferrer"}},[t._v("【编程玄学】一个困扰我122天的技术问题，我好像知道答案了。"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("17.3. Sleep and Yield"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://plumbr.io/blog/locked-threads/understanding-volatile-via-example",target:"_blank",rel:"noopener noreferrer"}},[t._v("Understanding volatile via example"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.zhihu.com/question/348513270",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么volatile注释变量，对其下面的变量也会有影响？"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);